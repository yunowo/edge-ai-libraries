#
# Apache v2 license
# Copyright (C) 2024 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#

services:
  broker:
    image: eclipse-mosquitto
    hostname: mqtt
    container_name: mqtt_broker
    volumes:
      - ../utils/mosquitto:/mosquitto/config
    ports:
      - "1883:1883"
    networks:
      - app_network

  dlstreamer-pipeline-server:
    image: ${DLSTREAMER_PIPELINE_SERVER_IMAGE}
    hostname: dlstreamer-pipeline-server
    container_name: dlstreamer-pipeline-server
    read_only: true
    security_opt:
      - no-new-privileges
    build:
      context: ..
      target: ${BUILD_TARGET}
      dockerfile: ${DLSTREAMER_PIPELINE_SERVER_DOCKERFILE}
      args:
        MSGBUS_LIB_VERSION: 4.0.0
        UTILS_LIB_VERSION: 4.0.0
        UID: ${UID}
        USER: ${PIPELINE_SERVER_USER}
        BASE_IMAGE: ${BASE_IMAGE}
        CMAKE_INSTALL_PREFIX: "/opt/intel/eii"
        no_proxy: ${no_proxy}
        http_proxy: ${http_proxy}
        https_proxy: ${https_proxy}
    privileged: false
    tty: true
    entrypoint: ["./run.sh"]
    ports:
      - '8080:8080'
      - '8554:8554'
    networks:
      - app_network
    environment:
      - S3_STORAGE_HOST=${S3_STORAGE_HOST}
      - S3_STORAGE_PORT=${S3_STORAGE_PORT}
      - S3_STORAGE_USER=${S3_STORAGE_USER}
      - S3_STORAGE_PASS=${S3_STORAGE_PASS}
      - MQTT_HOST=${MQTT_HOST}
      - MQTT_PORT=${MQTT_PORT}
      - ENABLE_RTSP=true
      - RTSP_PORT=8554
      - ENABLE_WEBRTC=true
      - WEBRTC_SIGNALING_SERVER=ws://localhost:8443
      - no_proxy=$no_proxy,${RTSP_CAMERA_IP},otel-collector
      - http_proxy=$http_proxy
      - https_proxy=$https_proxy
      - GST_DEBUG=1
      - LOG_LEVEL=${LOG_LEVEL}
      - ADD_UTCTIME_TO_METADATA=true
      - HTTPS=false # Make it "true" to enable SSL/TLS secure mode, mount the generated certificates
      - MTLS_VERIFICATION=false # if HTTPS=true, enable/disable client certificate verification for mTLS
      # Model Registry Microservice
      - MR_URL=${MR_URL}
      - MR_SAVED_MODELS_DIR=${MR_SAVED_MODELS_DIR}
      - MR_REQUEST_TIMEOUT=${MR_REQUEST_TIMEOUT}
      - MR_VERIFY_CERT=${MR_VERIFY_CERT}
      - REST_SERVER_PORT=8080
      - SERVICE_NAME=dlstreamer-pipeline-server
      - OPCUA_SERVER_IP=$OPCUA_SERVER_IP
      - OPCUA_SERVER_PORT=$OPCUA_SERVER_PORT
      - OPCUA_SERVER_USERNAME=$OPCUA_SERVER_USERNAME
      - OPCUA_SERVER_PASSWORD=$OPCUA_SERVER_PASSWORD
      - ENABLE_OPEN_TELEMETRY=true
      - OTEL_COLLECTOR_HOST=${OTEL_COLLECTOR_HOST}
      - OTEL_COLLECTOR_PORT=${OTEL_COLLECTOR_PORT}
      - OTEL_EXPORT_INTERVAL_MILLIS=${OTEL_EXPORT_INTERVAL_MILLIS}
      # NPU related environment variables
      - ZE_ENABLE_ALT_DRIVERS=libze_intel_npu.so
    depends_on:
      - otel-collector
    volumes:
      - "../resources:/home/pipeline-server/resources/"
      # - "../configs/default/config.json:/home/pipeline-server/config.json"
      - vol_pipeline_root:/var/cache/pipeline_root:uid=1999,gid=1999
      - "../certificates:/MqttCerts:ro"
      - "../Certificates/ssl_server/:/run/secrets/DLStreamerPipelineServer_Server:ro"
      - "../Certificates/model_registry/:/run/secrets/ModelRegistry_Server:ro"
      #  - "../user_scripts/udfs/python:/home/pipeline-server/udfs/python"
      - "/run/udev:/run/udev:ro"
      - "/dev:/dev"
      - "/tmp:/tmp"
      - "./mr_models:/home/pipeline-server/mr_models:rw"
    group_add:
      # render group ID for ubuntu 20.04 host OS
      - "109"
      # render group ID for ubuntu 22.04 host OS
      - "110"
      # render group ID for ubuntu 24.04 host OS
      - "992"
    device_cgroup_rules:
      # Default run - device-cgroup-rule='c 189:* rmw'
      # Selective rules can be applied for deployment
      - 'c 189:* rmw'
      - 'c 209:* rmw'
      - 'a 189:* rwm'
    devices:
      # Following devices under /dev filesystem will be needed based on usecase
      # dri - GPU
      # accel - NPU
      # USB camera devices
      # Selective mount can be done for deployment as mounting whole /dev is not recommended
      - "/dev:/dev"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    environment:
      - HTTP_PROXY=${http_proxy}
      - HTTPS_PROXY=${https_proxy}
      - NO_PROXY=$no_proxy,otel-collector,localhost,127.0.0.1
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ../configs/open_telemetry/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app_network

  loki:
    image: grafana/loki:latest
    container_name: loki
    environment:
      - HTTP_PROXY=${http_proxy}
      - HTTPS_PROXY=${https_proxy}
      - NO_PROXY=$no_proxy,otel-collector,localhost,127.0.0.1
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    networks:
      - app_network
    volumes:
      - loki-data:/loki
      
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    ports:
      - "${GRAFANA_PORT}:3000"
    depends_on:
      - prometheus
      - loki
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - app_network

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.94.0
    container_name: otel-collector
    environment:
      HTTP_PROXY: ${http_proxy}
      HTTPS_PROXY: ${https_proxy}
      NO_PROXY: $no_proxy,prometheus,loki,dlstreamer-pipeline-server,localhost,127.0.0.1
    ports:
      - "4317:4317"  # OTLP gRPC receiver (default for metrics)
      - "4318:4318"  # Prometheus scrape target
    volumes:
      - ../configs/open_telemetry/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml  # OpenTelemetry Collector config
    restart: always
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  vol_pipeline_root:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
  grafana-data:
  loki-data:
